Parameters:
  EnvironmentName:
      Description: "A way to describe your environment"
      Type: String


Resources:

  LoadBalancerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: SG for LB ingress & egress
          VpcId: 
            Fn::ImportValue:
               !Sub "${EnvironmentName}-VPCID"
          SecurityGroupEgress:
          - IpProtocol: tcp
            CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
          SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80

  WebServerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
         GroupDescription: Security group for web server
         VpcId: 
           Fn::ImportValue:
             !Sub "${EnvironmentName}-VPCID"
         SecurityGroupIngress:
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 80
           ToPort: 80
         - IpProtocol: tcp
           FromPort: 22
           ToPort: 22
           CidrIp: 0.0.0.0/0
         SecurityGroupEgress:
         - IpProtocol: -1
           CidrIp: 0.0.0.0/0
  




  UdacityS3Role:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
           Version: "2012-10-17"
           Statement:
             - Effect: "Allow"
               Principal:
                  Service: 
                    - ec2.amazonaws.com
               Action: 
                  - 'sts:AssumeRole'
         Path: /

  UdacityS3ReadOnlyEC2:
      Type: AWS::IAM::InstanceProfile
      Properties:
         InstanceProfileName: UdacityS3ReadOnlyEC2
         Path: /
         Roles:
         - !Ref UdacityS3Role

  UdacityS3BucketPolicy:
      Type: AWS::IAM::Policy
      Properties:
         PolicyName: UdacityS3BucketPolicy
         PolicyDocument:
           Version: 2012-10-17
           Statement:
             - Effect: Allow
               Action:
                 - 's3:ListObjects'
                 - 's3:GetObject'
               Resource: 'arn:aws:s3:::udacity-demo-2019/udacity.zip'
         Roles:
           - !Ref UdacityS3Role
                  
  WebLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
         UserData:
           Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            mkdir -p /var/www/html
            cd /var/www/html
            aws s3 cp s3://udacity-demo-2019/udacity.zip .
            unzip -o udacity.zip
         ImageId: ami-005bdb005fb00e791
         IamInstanceProfile: !Ref UdacityS3ReadOnlyEC2
         SecurityGroups: 
         - Ref: WebServerSG
         InstanceType: t2.medium
         BlockDeviceMappings:
         - DeviceName: "/dev/sdk"
           Ebs:
             VolumeSize: '10'

  WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
         VPCZoneIdentifier:
         - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NET"
         LaunchConfigurationName: !Ref WebLaunchConfig
         MinSize: '4'
         MaxSize: '4'
         TargetGroupARNs: 
         - Ref: WebAppTargetGroup

  WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
         Subnets:
         - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
         - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
         SecurityGroups: 
         - Ref: LoadBalancerSG

  LBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
         DefaultActions:
         - Type: forward
           TargetGroupArn: !Ref 'WebAppTargetGroup'
         LoadBalancerArn: !Ref 'WebAppLB'
         Port: '80'
         Protocol: HTTP

  LBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
         Actions:
         - Type: forward
           TargetGroupArn: !Ref 'WebAppTargetGroup'
         Conditions:
         - Field: path-pattern
           Values: [/]
         ListenerArn: !Ref LBListener
         Priority: '1'

  WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
         HealthCheckIntervalSeconds: 10
         HealthCheckPath: /
         HealthCheckProtocol: HTTP
         HealthCheckTimeoutSeconds: 5
         HealthyThresholdCount: 2
         Port: 80
         Protocol: HTTP
         UnhealthyThresholdCount: 5
         VpcId: 
           Fn::ImportValue:
             Fn::Sub: "${EnvironmentName}-VPCID"
  
Outputs:
  LBDNS:
      Description: The dns name from the elb
      Value: !GetAtt WebAppLB.DNSName
      Export:
          Name: !Sub ${EnvironmentName}-PUB-DNS
 
  URL:
      Description: The url to the load balancer
      Value: !Sub 'http://${WebAppLB.DNSName}'
      Export:
          Name: !Sub ${EnvironmentName}-URL

            

            
                